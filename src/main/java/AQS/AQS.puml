@startuml

title ReentranLock 加锁

box "ReentrantLock" #LightBlue
    participant "lock()" as RLock
end box

box "Sync类" #LightGreen
    participant "lock()" as SLock
end box

box "NonfairSync" #LightPink
    participant "lock()" as NFLock
    participant "tryAcquire()" as NFTAc
    participant "nonfairTryAcquire()" as NFNFTAc
end box

box "AQS"  #LightYellow
    participant "compareAndSetState()" as CAS
    participant "acquire()" as AQSAc
    participant "tryAcquire()" as AQStAc
    participant "acquireQueued()" as AQSacQu
end box

box "AbstractOwnableSynchronizer"  #Orange
    participant setExclusiveOwnerThread as setEx
end box

RLock -> SLock:  调用
SLock --> NFLock: 调用,Sync的lock方法是抽象方法,\n实现这个方法的有\nFairSync和NonFairSync
NFLock -> CAS:调用native方法cas判断
group 第一次加锁
CAS --> NFLock: CAS返回true
NFLock -> setEx: 将当前线程设置为独占者线程,以避免第一次进来就加锁，向OS申请资源
end

group 第二次加锁
CAS --> NFLock: CAS返回false,即使是第一次加锁的线程也会返回false
NFLock -> AQSAc: 调用
AQSAc  -> AQStAc: 拿锁(我把它称为锁，其实不是锁)
AQStAc -> NFTAc: AQS自己的tryAcquire()只是throw了UnsupportedOperationException,这是模板模式
NFTAc  -> NFNFTAc: 调用
note right
nonfairTryAcquire()
end note
NFNFTAc -> NFTAc:返回Boolean
NFTAc -> AQStAc : 返回Boolean

alt true
AQStAc -> AQStAc: 返回true,成功加锁,over
else false
AQStAc -> AQSacQu: 返回flase，没拿到锁会将当前线程放入等待队列中
end
end



@enduml